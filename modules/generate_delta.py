# modules/generate_delta.py

import numpy as np
import subprocess
import os
import shutil
import logging
from datetime import datetime

class GenerateDeltaError(Exception):
    pass

# Configure logging for generate_delta.py
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)  # Capture all levels (DEBUG and above)

if not logger.handlers:
    # File handler for logging (captures DEBUG and above)
    fh = logging.FileHandler('generate_delta.log')
    fh.setLevel(logging.DEBUG)  # Record DEBUG+ in the file
    fh_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    fh.setFormatter(fh_formatter)
    logger.addHandler(fh)

    # Console handler for logging (captures INFO and above)
    ch = logging.StreamHandler()
    ch.setLevel(logging.INFO)  # Show INFO+ on console
    ch_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    ch.setFormatter(ch_formatter)
    logger.addHandler(ch)

def initialfn(x, gamma=0.3):
    """
    The same piecewise function as in the original Perl script:
      if |x| < 1.0  => Gamma * (1 - x^2)
      else          => Gamma * 1e-5
    """
    return gamma * (1.0 - x**2) if abs(x) < 1.0 else gamma * 1e-5

def format_number(val):
    """
    Formats the number in either decimal or scientific notation based on its magnitude.
    Ensures the exponent has only one digit (e.g., e-6 instead of e-06).
    """
    abs_val = abs(val)
    if abs_val >= 1e-5:
        s = f"{val:.16f}"
    else:
        s = f"{val:.16e}"
    return s.replace("e-0", "e-").replace("e+0", "e+")

def generate_Delta(params, param_loop_path="param.loop", gamma=0.3):
    """
    Generates Delta.dat and Delta-re.dat based on parameters.

    Parameters:
        params (dict): Dictionary containing broaden_max, broaden_ratio, broaden_min, etc.
        param_loop_path (str): Path to the param.loop file.
        gamma (float): Parameter for the initialfn function.

    Returns:
        tuple: Paths to the generated Delta.dat and Delta-re.dat files.

    Raises:
        GenerateDeltaError: If Delta generation fails or 'kk' is missing.
    """
    try:
        # Log routine steps at DEBUG level
        logger.debug("Starting Delta generation.")
        logger.debug(f"Parameters: broaden_max={params.get('broaden_max')}, "
                     f"broaden_ratio={params.get('broaden_ratio')}, "
                     f"broaden_min={params.get('broaden_min')}, gamma={gamma}")

        # Extract Delta generation parameters
        broaden_max = params.get("broaden_max", 10.0)
        broaden_ratio = params.get("broaden_ratio", 1.05)
        broaden_min = params.get("broaden_min", 0.01)

        # Generate data points for Delta.dat
        data_points = []
        x = broaden_max
        while x >= broaden_min:
            y_pos = initialfn(x, gamma)
            y_neg = initialfn(-x, gamma)
            data_points.append((x, y_pos))
            data_points.append((-x, y_neg))
            x /= broaden_ratio

        data_points.sort(key=lambda p: p[0])

        # Write Delta.dat
        delta_dat_path = "Delta.dat"
        try:
            with open(delta_dat_path, "w") as out:
                for x_val, y_val in data_points:
                    out.write(f"{format_number(x_val)}\t{format_number(y_val)}\n")
            logger.debug(f"Delta.dat has been successfully generated at '{delta_dat_path}'.")
        except Exception as e:
            # Errors are logged at INFO so they show up despite logger.setLevel(logging.DEBUG)
            logger.info(f"Error writing '{delta_dat_path}': {e}")
            raise GenerateDeltaError(f"Error writing '{delta_dat_path}': {e}")

        # Call 'kk' for Delta-re.dat
        kk_executable = "kk"
        if not shutil.which(kk_executable):
            logger.info(f"The '{kk_executable}' executable was not found.")
            raise GenerateDeltaError(
                f"The '{kk_executable}' executable was not found. Ensure it is installed and in your PATH."
            )

        try:
            logger.debug("Running 'kk' to generate Delta-re.dat.")
            subprocess.run([kk_executable, delta_dat_path, "Delta-re.dat"], check=True)
            logger.debug("Delta-re.dat has been successfully generated by 'kk'.")
        except subprocess.CalledProcessError as e:
            logger.info(f"An error occurred while running '{kk_executable}': {e}")
            raise GenerateDeltaError(f"An error occurred while running '{kk_executable}': {e}")

        logger.debug("Delta generation completed successfully.")
        return delta_dat_path, "Delta-re.dat"

    except GenerateDeltaError:
        # Re-raise custom exceptions without modification
        raise
    except Exception as e:
        # Catch-all for any other unexpected exceptions
        logger.info(f"Unexpected error during Delta generation: {e}")
        raise GenerateDeltaError(f"Unexpected error during Delta generation: {e}")